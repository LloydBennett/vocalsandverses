{"version":3,"sources":["main.js","modules/carousel.js","modules/modal.js","modules/nav-menu.js","modules/page-transition.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"script.js","sourcesContent":["//dom elements\n\n/*var $pageTitle = document.querySelector('head title'),\n\t$testimonals = document.querySelectorAll('.testimonals'),\n\t$testimonyQuotes = document.querySelectorAll('.entry'),\n\t$testimonyImages = document.querySelectorAll('.carousel-image .thumbnail'),\n\t$prevController = document.querySelector('.prev'),\n\t$nextController = document.querySelector('.next'),\n\t$modalOverlay = document.querySelector('.modal-overlay'),\n\t$modalWindow = document.querySelectorAll('.modal-content'),\n\t$largePlayBtn = document.querySelector('.play-btn-lrg')*/\nvar $testimonals = document.querySelectorAll('[data-carousel=\"testimonal\"]');\n\nfunction removeClassFromNodeList(nodeList, className){\n  if(typeof className === \"object\") {\n    nodeList.forEach(function(element){\n      for(var index = 0; index < className.length; index++) {\n        element.classList.remove(className[index]);\n      }\n    });\n  } else {\n    nodeList.forEach(function(element){\n      element.classList.remove(className);\n    });\n  }\n}\n\n(function() {\n\n\t//initialises all functions that need to be called\n\tfunction init(){\n\n\t\t// var pageTransition = new PageTransition(document.querySelectorAll('[data-page-transition]'));\n\t\tvar testimonialWidget = new Carousel({\n\t\t\tnextController: document.querySelector('.next'),\n\t\t\tprevController: document.querySelector('.prev'),\n\t\t\tslides: document.querySelectorAll('.testimonals-entry'),\n      progressTabs: document.querySelectorAll('.testimonals-progress-tabs .tab')\n\t\t});\n\t\t// var navMenu = new NavigationMenu({\n\t\t// \tmenu: document.querySelector('[data-role=\"nav-menu\"]'),\n\t\t// \tmenuTrigger: document.querySelector('[data-role=\"open-menu\"]'),\n\t\t// \tbody: document.querySelector('body'),\n\t\t// \tnavLinks: document.querySelectorAll('.nav-modal [data-role=\"nav-menu-links\"]')\n\t\t// });\n\t}\n\n\twindow.onload = function() {\n\t\tinit();\n\t};\n\n}());\n","function Carousel(options) {\n  var defaults = {\n    autoplay: true,\n    delay: 6000\n  };\n  this.options = Object.assign(options, defaults);\n  this.counter = 0;\n  this.previousSlideCounter = this.options.slides.length - 1;\n  this.isAnimating = false;\n  this.init();\n}\n\nCarousel.prototype = {\n  init: function(){\n      this.addEvents();\n      this.move();\n\n      if(this.options.autoplay) {\n        setInterval(function(){\n          if(!this.isAnimating) this.move(1);\n        }.bind(this), this.options.delay)\n      }\n  },\n  addEvents: function(){\n    if(this.options.nextController) {\n        this.options.nextController.onclick = function(){\n            if(!this.isAnimating) this.move(1);\n        }.bind(this);\n    }\n\n    if(this.options.prevController) {\n        this.options.prevController.onclick = function() {\n            if(!this.isAnimating) this.move(-1);\n        }.bind(this);\n    }\n\n    if(this.options.progressTabs) {\n      var _this = this;\n      this.options.progressTabs.forEach(function(element, index) {\n        element.onclick = function(){\n          _this.moveViaLink(index);\n        }\n      });\n    }\n  },\n  checkCounterLimit: function(n){\n    var slidesMaxLength = this.options.slides.length - 1;\n\n    if (this.counter > slidesMaxLength || this.counter < 0) {\n      this.counter = (n == 1) ? 0 : slidesMaxLength;\n    }\n    if (this.previousSlideCounter > slidesMaxLength || this.previousSlideCounter < 0) {\n      this.previousSlideCounter = (n == 1) ? 0 : slidesMaxLength;\n    }\n  },\n  moveViaLink: function(index) {\n    var slides = this.options.slides;\n\n    this.counter = index;\n    this.previousSlideCounter = index - 1;\n    this.checkCounterLimit(index);\n    this.animateSlides(slides[index], slides[this.previousSlideCounter]);\n  },\n  move: function(direction) {\n    var slides = this.options.slides;\n\n    if (!direction) direction = 0;\n\n    this.counter += direction;\n    this.previousSlideCounter += direction;\n    this.checkCounterLimit(direction);\n    this.animateSlides(slides[this.counter], slides[this.previousSlideCounter]);\n  },\n  animateSlides: function(slideIn, slideOut) {\n    this.isAnimating = true;\n    removeClassFromNodeList(this.options.slides, ['previous-slide', 'active-slide']);\n    slideOut.classList.add('previous-slide');\n    slideIn.classList.add('active-slide');\n    this.updateProgressTab();\n\n    slideIn.addEventListener('webkitTransitionEnd', function(){\n      this.isAnimating = false;\n    }.bind(this));\n  },\n  updateProgressTab: function(){\n    removeClassFromNodeList(this.options.progressTabs, 'active');\n    this.options.progressTabs[this.counter].classList.add('active');\n  }\n};\n","/*\nvar modalOpen = false, player;\nfunction triggerModal(event) {\n    if(!modalOpen) {\n        var modalName = (event.target.getAttribute('data-trigger-modal')) ?\n                event.target.getAttribute('data-trigger-modal') : event.target.parentNode.getAttribute('data-trigger-modal'),\n            $modal = document.querySelectorAll('[data-modal-name=\"' +  modalName + '\"]');\n\n        $modalOverlay.classList.add('visible');\n        $modal[0].classList.add('open');\n        modalOpen = true;\n    } else {\n        $modalOverlay.classList.remove('visible');\n        $modalWindow.forEach(function($elem) {\n            $elem.classList.remove('open');\n        });\n        modalOpen = false;\n    }\n}*/\n","function NavigationMenu(options){\n    this.options = options;\n    this.init();\n}\n\nNavigationMenu.prototype = {\n  init: function(){\n      this.addEvents();\n  },\n  addEvents: function(){\n      this.options.menuTrigger.onclick = this.toggleMenu.bind(this);\n  },\n  toggleMenu: function(){\n      this.options.menu.classList.toggle('menu-open');\n      this.options.menuTrigger.classList.toggle('menu-open');\n      this.options.body.classList.toggle('menu-open');\n      this.animateNavLinks();\n  },\n  animateNavLinks: function(){\n   var delay;\n   this.options.navLinks.forEach(function(link, index){\n       delay = 80 * index;\n       setTimeout(function(){\n           link.classList.toggle('appear');\n       }, delay);\n   });\n  }\n};","//module for page transitions\nfunction PageTransition($pageLinks, callback) {\n    this.pageLinks = $pageLinks;\n    this.init(this.pageLinks);\n    //this.callback = callback || function(){};\n}\n\nPageTransition.prototype = {\n    init: function() {\n        if(typeof this.pageLinks == 'object') {\n            this.addEvent(this.pageLinks);\n        } else {\n            throw new Error('The argument you have parsed needs to be of type object');\n        }\n    },\n    addEvent: function($link) {\n        var _self = this;\n        for(var index = 0; index < $link.length; index++) {\n            $link[index].addEventListener('click', function(event) {\n                event.preventDefault();\n                event.stopPropagation();\n                var url = event.target.getAttribute('href');\n                _self.pageRequest(url);\n            });\n        }\n    },\n    pageRequest: function(url) {\n        this.animatePage();\n        var xhr = new XMLHttpRequest(),\n            newElement,\n            requestedContent,\n            requestedPageTitle,\n            $pageWrapper = document.getElementById('page-wrapper'),\n            $pageTitle = document.querySelector('head title');\n        xhr.onreadystatechange = function() {\n            if(this.readyState == 4 && this.status == 200) {\n                newElement = document.createElement('div');\n                newElement.innerHTML = this.response;\n                console.log(this.response);\n                /*requestedPageTitle = newElement.querySelector('head title');\n                requestedContent = newElement.querySelector('#page-wrapper');\n                $pageTitle = requestedPageTitle;\n                $pageWrapper.innerHTML = requestedContent.innerHTML;*/\n            }\n        };\n        xhr.open('GET', url + '#page-wrapper');\n        xhr.send();\n\n        /*\n         if the current page is not the same as the requested page\n         then change the url to the request page and\n         add it to the window history.\n         */\n        if(url != window.location) {\n            window.history.pushState({path: url},'',url);\n            //this.callback();\n        }\n    },\n    animatePage: function(){\n        console.log('Page is animating');\n        //toggleMenu();\n    }\n};"]}